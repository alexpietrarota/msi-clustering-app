)
data02 <- fun_extractData(
folderName = "/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO F/F_02",
fileName = "f_02"
)
# Esplora i risultati
data01$featureMatrix[1:5, 1:5]
# Esplora i risultati
data01$featureMatrix[1:5, 1:5]
data01$coordinates[1:5, ]
data011$mz[1:10]
data01$mz[1:10]
for (int in seq_along(fileName_int)) {
folderTypeEpilepsy <- folderTypeEpilepsy_int[int]
folderName <- folderName_int[int]
fileName <- fileName_int[int]
# Costruzione del path corretto
file_path <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".imzML"))
ibd_path  <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".ibd"))
if (!file.exists(file_path) || !file.exists(ibd_path)) {
warning("⚠️ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
if (length(spectra) == 0) {
warning("⚠️ Nessuno spettro trovato in: ", file_path)
next
}
plot(spectra[[1]])
n_pixel <- length(spectra)
coor_x <- numeric(n_pixel)
coor_y <- numeric(n_pixel)
intensity <- vector("list", n_pixel)
for (i_pixel in seq_len(n_pixel)) {
coor_x[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[1]]
coor_y[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[2]]
intensity[[i_pixel]] <- spectra[[i_pixel]]@intensity
}
name_mz <- round(spectra[[1]]@mass, 3)
featureMatrix <- t(do.call(cbind, intensity))
colnames(featureMatrix) <- name_mz
coordinates <- data.frame(xcoordinates = coor_x, ycoordinates = coor_y)
if (!dir.exists(folderDataSave_PreProc)) dir.create(folderDataSave_PreProc, recursive = TRUE)
if (!dir.exists(folderDataSave_LowRes)) dir.create(folderDataSave_LowRes, recursive = TRUE)
write.table(coordinates, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-XYCoordinates.txt")),
sep = "\t", row.names = FALSE)
write.table(featureMatrix, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-IM.txt")),
sep = "\t", row.names = FALSE)
# Riduzione risoluzione
Data <- as.data.frame(featureMatrix)
Data[is.na(Data)] <- 0
Data$Latitude <- coor_x
Data$Longitude <- coor_y
n_grid <- 50
cell_x <- findInterval(Data$Latitude, seq(0, max(Data$Latitude), length.out = n_grid))
cell_y <- findInterval(Data$Longitude, seq(0, max(Data$Longitude), length.out = n_grid))
Data$grid <- paste(cell_x, cell_y, sep = "_")
library(dplyr)
summary_df <- Data %>%
group_by(grid) %>%
summarise(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{col}"),
.groups = "drop")
# Ricostruzione coordinate e matrice
mz_cols <- grep("^mean_", names(summary_df), value = TRUE)
X_rid <- as.matrix(summary_df[, mz_cols])
colnames(X_rid) <- name_mz
XY_reduced <- summary_df %>%
select(coorX = mean_Latitude, coorY = mean_Longitude)
saveRDS(X_rid, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS")))
saveRDS(XY_reduced, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_S_rid.RDS")))
# Plot di controllo
library(ggplot2)
g <- ggplot(XY_reduced, aes(x = coorX, y = coorY)) +
geom_point() + ggtitle(paste("Grid", fileName)) +
theme_minimal()
print(g)
}
fileName_int<-c("f_01","f_02")
folderName_int<-c("F_01","F_02")
folderTypeEpilepsy_int<-c("F","F")
folderDataSave_PreProc<-"datiPuliti"
folderDataSave_LowRes<-"lowresolution"
for (int in seq_along(fileName_int)) {
folderTypeEpilepsy <- folderTypeEpilepsy_int[int]
folderName <- folderName_int[int]
fileName <- fileName_int[int]
# Costruzione del path corretto
file_path <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".imzML"))
ibd_path  <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".ibd"))
if (!file.exists(file_path) || !file.exists(ibd_path)) {
warning("⚠️ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
if (length(spectra) == 0) {
warning("⚠️ Nessuno spettro trovato in: ", file_path)
next
}
plot(spectra[[1]])
n_pixel <- length(spectra)
coor_x <- numeric(n_pixel)
coor_y <- numeric(n_pixel)
intensity <- vector("list", n_pixel)
for (i_pixel in seq_len(n_pixel)) {
coor_x[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[1]]
coor_y[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[2]]
intensity[[i_pixel]] <- spectra[[i_pixel]]@intensity
}
name_mz <- round(spectra[[1]]@mass, 3)
featureMatrix <- t(do.call(cbind, intensity))
colnames(featureMatrix) <- name_mz
coordinates <- data.frame(xcoordinates = coor_x, ycoordinates = coor_y)
if (!dir.exists(folderDataSave_PreProc)) dir.create(folderDataSave_PreProc, recursive = TRUE)
if (!dir.exists(folderDataSave_LowRes)) dir.create(folderDataSave_LowRes, recursive = TRUE)
write.table(coordinates, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-XYCoordinates.txt")),
sep = "\t", row.names = FALSE)
write.table(featureMatrix, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-IM.txt")),
sep = "\t", row.names = FALSE)
# Riduzione risoluzione
Data <- as.data.frame(featureMatrix)
Data[is.na(Data)] <- 0
Data$Latitude <- coor_x
Data$Longitude <- coor_y
n_grid <- 50
cell_x <- findInterval(Data$Latitude, seq(0, max(Data$Latitude), length.out = n_grid))
cell_y <- findInterval(Data$Longitude, seq(0, max(Data$Longitude), length.out = n_grid))
Data$grid <- paste(cell_x, cell_y, sep = "_")
library(dplyr)
summary_df <- Data %>%
group_by(grid) %>%
summarise(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{col}"),
.groups = "drop")
# Ricostruzione coordinate e matrice
mz_cols <- grep("^mean_", names(summary_df), value = TRUE)
X_rid <- as.matrix(summary_df[, mz_cols])
colnames(X_rid) <- name_mz
XY_reduced <- summary_df %>%
select(coorX = mean_Latitude, coorY = mean_Longitude)
saveRDS(X_rid, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS")))
saveRDS(XY_reduced, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_S_rid.RDS")))
# Plot di controllo
library(ggplot2)
g <- ggplot(XY_reduced, aes(x = coorX, y = coorY)) +
geom_point() + ggtitle(paste("Grid", fileName)) +
theme_minimal()
print(g)
}
fileName_int<-c("f_01","f_02")
folderName_int<-c("F_01","F_02")
folderTypeEpilepsy_int<-c("F","F")
folderDataSave_PreProc<-"datiPuliti"
folderDataSave_LowRes<-"lowresolution"
for (int in seq_along(fileName_int)) {
folderTypeEpilepsy <- folderTypeEpilepsy_int[int]
folderName <- folderName_int[int]
fileName <- fileName_int[int]
# Costruzione del path corretto
file_path <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".imzML"))
ibd_path  <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".ibd"))
if (!file.exists(file_path) || !file.exists(ibd_path)) {
warning("⚠️ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
if (length(spectra) == 0) {
warning("⚠️ Nessuno spettro trovato in: ", file_path)
next
}
plot(spectra[[1]])
n_pixel <- length(spectra)
coor_x <- numeric(n_pixel)
coor_y <- numeric(n_pixel)
intensity <- vector("list", n_pixel)
for (i_pixel in seq_len(n_pixel)) {
coor_x[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[1]]
coor_y[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[2]]
intensity[[i_pixel]] <- spectra[[i_pixel]]@intensity
}
name_mz <- round(spectra[[1]]@mass, 3)
featureMatrix <- t(do.call(cbind, intensity))
colnames(featureMatrix) <- name_mz
coordinates <- data.frame(xcoordinates = coor_x, ycoordinates = coor_y)
if (!dir.exists(folderDataSave_PreProc)) dir.create(folderDataSave_PreProc, recursive = TRUE)
if (!dir.exists(folderDataSave_LowRes)) dir.create(folderDataSave_LowRes, recursive = TRUE)
write.table(coordinates, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-XYCoordinates.txt")),
sep = "\t", row.names = FALSE)
write.table(featureMatrix, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-IM.txt")),
sep = "\t", row.names = FALSE)
# Riduzione risoluzione
Data <- as.data.frame(featureMatrix)
Data[is.na(Data)] <- 0
Data$Latitude <- coor_x
Data$Longitude <- coor_y
n_grid <- 50
cell_x <- findInterval(Data$Latitude, seq(0, max(Data$Latitude), length.out = n_grid))
cell_y <- findInterval(Data$Longitude, seq(0, max(Data$Longitude), length.out = n_grid))
Data$grid <- paste(cell_x, cell_y, sep = "_")
library(dplyr)
summary_df <- Data %>%
group_by(grid) %>%
summarise(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{col}"),
.groups = "drop")
# Ricostruzione coordinate e matrice
mz_cols <- grep("^mean_", names(summary_df), value = TRUE)
X_rid <- as.matrix(summary_df[, mz_cols])
colnames(X_rid) <- name_mz
XY_reduced <- summary_df %>%
select(coorX = mean_Latitude, coorY = mean_Longitude)
saveRDS(X_rid, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS")))
saveRDS(XY_reduced, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_S_rid.RDS")))
# Plot di controllo
library(ggplot2)
g <- ggplot(XY_reduced, aes(x = coorX, y = coorY)) +
geom_point() + ggtitle(paste("Grid", fileName)) +
theme_minimal()
print(g)
}
fileName_int <- c("f_01", "f_02")
fileName_int <- c("f_01", "f_02")
folderName_int <- c("F_01", "F_02")
folderTypeEpilepsy_int <- c(
"/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO F",
"/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO F"
)
for (int in seq_along(fileName_int)) {
folderTypeEpilepsy <- folderTypeEpilepsy_int[int]
folderName <- folderName_int[int]
fileName <- fileName_int[int]
# Costruzione del path corretto
file_path <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".imzML"))
ibd_path  <- file.path(folderTypeEpilepsy, folderName, paste0(fileName, ".ibd"))
if (!file.exists(file_path) || !file.exists(ibd_path)) {
warning("⚠️ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
if (length(spectra) == 0) {
warning("⚠️ Nessuno spettro trovato in: ", file_path)
next
}
plot(spectra[[1]])
n_pixel <- length(spectra)
coor_x <- numeric(n_pixel)
coor_y <- numeric(n_pixel)
intensity <- vector("list", n_pixel)
for (i_pixel in seq_len(n_pixel)) {
coor_x[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[1]]
coor_y[i_pixel] <- spectra[[i_pixel]]@metaData$imaging$pos[[2]]
intensity[[i_pixel]] <- spectra[[i_pixel]]@intensity
}
name_mz <- round(spectra[[1]]@mass, 3)
featureMatrix <- t(do.call(cbind, intensity))
colnames(featureMatrix) <- name_mz
coordinates <- data.frame(xcoordinates = coor_x, ycoordinates = coor_y)
if (!dir.exists(folderDataSave_PreProc)) dir.create(folderDataSave_PreProc, recursive = TRUE)
if (!dir.exists(folderDataSave_LowRes)) dir.create(folderDataSave_LowRes, recursive = TRUE)
write.table(coordinates, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-XYCoordinates.txt")),
sep = "\t", row.names = FALSE)
write.table(featureMatrix, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-IM.txt")),
sep = "\t", row.names = FALSE)
# Riduzione risoluzione
Data <- as.data.frame(featureMatrix)
Data[is.na(Data)] <- 0
Data$Latitude <- coor_x
Data$Longitude <- coor_y
n_grid <- 50
cell_x <- findInterval(Data$Latitude, seq(0, max(Data$Latitude), length.out = n_grid))
cell_y <- findInterval(Data$Longitude, seq(0, max(Data$Longitude), length.out = n_grid))
Data$grid <- paste(cell_x, cell_y, sep = "_")
library(dplyr)
summary_df <- Data %>%
group_by(grid) %>%
summarise(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{col}"),
.groups = "drop")
# Ricostruzione coordinate e matrice
mz_cols <- grep("^mean_", names(summary_df), value = TRUE)
X_rid <- as.matrix(summary_df[, mz_cols])
colnames(X_rid) <- name_mz
XY_reduced <- summary_df %>%
select(coorX = mean_Latitude, coorY = mean_Longitude)
saveRDS(X_rid, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS")))
saveRDS(XY_reduced, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_S_rid.RDS")))
# Plot di controllo
library(ggplot2)
g <- ggplot(XY_reduced, aes(x = coorX, y = coorY)) +
geom_point() + ggtitle(paste("Grid", fileName)) +
theme_minimal()
print(g)
}
# Estrai m/z comuni tra tutti i campioni
common_mz <- Reduce(intersect, lapply(lista_allineati, function(x) x@mass))
for(int in 1: length(fileName_int)){
folderTypeEpilepsy<-folderTypeEpilepsy_int[int]
folderName<-folderName_int[int]
fileName<-fileName_int[int]
file = paste0(folderTypeEpilepsy,"/",folderName,"/",fileName, ".imzML")
spectra = importImzMl(file.path(file), centroided=TRUE)
lista_nomi[[int]]<-spectra[[1]]
rm(spectra)
}
lista_allineati<-binPeaks(lista_nomi, tol=0.16)
lista_allineati<-binPeaks(lista_allineati, tol=0.16)
lista_allineati<-binPeaks(lista_allineati, tol=0.16)
lista_allineati<-binPeaks(lista_allineati, tol=0.16)
lista_allineati<-binPeaks(lista_allineati, tol=0.16)
#lista_allineati<-monoisotopicPeaks(lista_allineati,  minCor=0.60, tolerance=1e-4, distance=1.00235, size=3L:10L)
head(lista_allineati)
library(plyr)
library(VennDiagram)
# Input dei file
fileName_int <- c("f_01", "f_02")
folderName_int <- c("F_01", "F_02")
folderTypeEpilepsy_int <- c("F", "F")
# Inizializza lista per spettri
lista_nomi <- list()
# Carica solo il primo spettro di ciascun file (pixel 1)
for (int in seq_along(fileName_int)) {
folder <- file.path(
"/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO",
folderTypeEpilepsy_int[int], folderName_int[int]
)
file_path <- file.path(folder, paste0(fileName_int[int], ".imzML"))
if (!file.exists(file_path)) {
warning("❌ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
lista_nomi[[int]] <- spectra[[1]]  # Solo il primo spettro
rm(spectra)
}
library(VennDiagram)
install.packages("VennDiagram")
library(VennDiagram)
# Definizione dei file
fileName_int <- c("f_01", "f_02")
folderName_int <- c("F_01", "F_02")
folderTypeEpilepsy_int <- c("F", "F")
# Inizializza lista per spettri
lista_nomi <- list()
# Percorso base
base_path <- "/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO F"
# Importa solo il primo spettro da ogni file
for (int in seq_along(fileName_int)) {
folder <- file.path(base_path, folderTypeEpilepsy_int[int], folderName_int[int])
file_path <- file.path(folder, paste0(fileName_int[int], ".imzML"))
if (!file.exists(file_path)) {
warning("❌ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
lista_nomi[[int]] <- spectra[[1]]  # Solo il primo spettro
rm(spectra)
}
# Percorso base
base_path <- "/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO"
# Importa solo il primo spettro da ogni file
for (int in seq_along(fileName_int)) {
folder <- file.path(base_path, folderTypeEpilepsy_int[int], folderName_int[int])
file_path <- file.path(folder, paste0(fileName_int[int], ".imzML"))
if (!file.exists(file_path)) {
warning("❌ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
lista_nomi[[int]] <- spectra[[1]]  # Solo il primo spettro
rm(spectra)
}
base_path <- "/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO F"
for (int in seq_along(fileName_int)) {
folder <- file.path(base_path, folderName_int[int])  # ✅ Usa solo folderName
file_path <- file.path(folder, paste0(fileName_int[int], ".imzML"))
if (!file.exists(file_path)) {
warning("❌ File mancante: ", file_path)
next
}
spectra <- importImzMl(file_path, centroided = TRUE)
lista_nomi[[int]] <- spectra[[1]]  # Solo il primo spettro
rm(spectra)
}
# Allineamento dei picchi (ripetuto 5 volte per migliorare la coerenza)
lista_allineati <- lista_nomi
for (i in 1:5) {
lista_allineati <- binPeaks(lista_allineati, tol = 0.16)
}
# Visualizza i primi elementi
head(lista_allineati)
folderDataSave_LowRes <- "lowresolution"
n_grid <- 50
lista_matrice <- list()
for (int in seq_along(fileName_int)) {
fileName <- fileName_int[int]
file_rds <- file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS"))
if (!file.exists(file_rds)) {
warning("⚠️ File RDS mancante: ", file_rds)
next
}
matrix <- readRDS(file_rds)
colnames(matrix) <- as.character(round(lista_allineati[[int]]@mass, 2))
lista_matrice[[int]] <- data.frame(matrix)
rm(matrix)
}
# Parte 3 - lettura matrici .RDS
folderDataSave_LowRes <- "lowresolution"
n_grid <- 50
lista_matrice <- list()
for (int in seq_along(fileName_int)) {
fileName <- fileName_int[int]
file_rds <- file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS"))
if (!file.exists(file_rds)) {
warning("⚠️ File RDS mancante: ", file_rds)
next
}
if (is.null(lista_allineati[[int]])) {
warning("⚠️ Picchi non disponibili per: ", fileName)
next
}
matrix <- readRDS(file_rds)
colnames(matrix) <- as.character(round(lista_allineati[[int]]@mass, 2))
lista_matrice[[int]] <- data.frame(matrix)
rm(matrix)
}
# Parametri
fileName_int <- c("f_01", "f_02")
folderName_int <- c("F_01", "F_02")
folderTypeEpilepsy_int <- c("F", "F")
base_path <- "/Users/alexpietrarota/Downloads/R studio Neuro7/SCRIPT R MALDI/Analisi/GRUPPO"
folderDataSave_LowRes <- "lowresolution"
folderDataSave_PreProc <- "datiPuliti"
n_grid <- 50
# Crea le cartelle se non esistono
if (!dir.exists(folderDataSave_LowRes)) dir.create(folderDataSave_LowRes)
if (!dir.exists(folderDataSave_PreProc)) dir.create(folderDataSave_PreProc)
for (int in seq_along(fileName_int)) {
folder <- file.path(base_path, folderTypeEpilepsy_int[int], folderName_int[int])
fileName <- fileName_int[int]
file_path <- file.path(folder, paste0(fileName, ".imzML"))
ibd_path <- file.path(folder, paste0(fileName, ".ibd"))
# Controllo esistenza file
if (!file.exists(file_path) || !file.exists(ibd_path)) {
warning("❌ File mancante: ", file_path)
next
}
# Importa spettri
spectra <- importImzMl(file_path, centroided = TRUE)
if (length(spectra) == 0) {
warning("⚠️ Nessuno spettro trovato in: ", file_path)
next
}
# Estrazione coordinate e intensità
n_pixel <- length(spectra)
coor_x <- numeric(n_pixel)
coor_y <- numeric(n_pixel)
intensity <- vector("list", n_pixel)
for (i in seq_len(n_pixel)) {
coor_x[i] <- spectra[[i]]@metaData$imaging$pos[[1]]
coor_y[i] <- spectra[[i]]@metaData$imaging$pos[[2]]
intensity[[i]] <- spectra[[i]]@intensity
}
name_mz <- round(spectra[[1]]@mass, 3)
featureMatrix <- t(do.call(cbind, intensity))
colnames(featureMatrix) <- name_mz
coordinates <- data.frame(xcoordinates = coor_x, ycoordinates = coor_y)
# Salvataggio file pre-processati (opzionale)
write.table(coordinates, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-XYCoordinates.txt")),
sep = "\t", row.names = FALSE)
write.table(featureMatrix, file.path(folderDataSave_PreProc, paste0(fileName, "-PreProcessed-IM.txt")),
sep = "\t", row.names = FALSE)
# Riduzione risoluzione
Data <- as.data.frame(featureMatrix)
Data[is.na(Data)] <- 0
Data$Latitude <- coor_x
Data$Longitude <- coor_y
# Assegna ogni punto a una cella di griglia
cell_x <- findInterval(Data$Latitude, seq(0, max(Data$Latitude), length.out = n_grid))
cell_y <- findInterval(Data$Longitude, seq(0, max(Data$Longitude), length.out = n_grid))
Data$grid <- paste(cell_x, cell_y, sep = "_")
# Media dei valori per ciascuna cella
summary_df <- Data %>%
group_by(grid) %>%
summarise(across(.cols = where(is.numeric), .fns = mean, .names = "mean_{col}"), .groups = "drop")
# Costruzione matrice ridotta
mz_cols <- grep("^mean_", names(summary_df), value = TRUE)
X_rid <- as.matrix(summary_df[, mz_cols])
colnames(X_rid) <- name_mz
# Coordinate ridotte
XY_reduced <- summary_df %>%
select(coorX = mean_Latitude, coorY = mean_Longitude)
# Salvataggio dei file RDS
saveRDS(X_rid, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_X_rid.RDS")))
saveRDS(XY_reduced, file = file.path(folderDataSave_LowRes, paste0(fileName, "_resolution", n_grid, "_S_rid.RDS")))
# Plot di controllo
g <- ggplot(XY_reduced, aes(x = coorX, y = coorY)) +
geom_point() +
ggtitle(paste("Grid", fileName)) +
theme_minimal()
print(g)
}
runApp('lancio_app.R')
runApp('lancio_app.R')
if (!requireNamespace("Cardinal", quietly = TRUE)) {
if (!requireNamespace("BiocManager", quietly = TRUE)) {
install.packages("BiocManager")
}
BiocManager::install("Cardinal")
}
library(Cardinal)
library(SummarizedExperiment)
library(MALDIquant)
library(MALDIquantForeign)
runApp('lancio_app.R')
packageVersion("dplyr")
runApp('lancio_app.R')
